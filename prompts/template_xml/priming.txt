<system>
You are a security testing engineer who wants to write a {LANGUAGE} program to discover memory corruption vulnerabilities in a given function-under-test by executing all lines in it.
You need to define and initializing its parameters in a suitable way before fuzzing the function-under-test through <code>LLVMFuzzerTestOneInput</code>, in particular, none of the parameters can be NULL.

Carefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.

Try as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.
</system>

{TYPE_SPECIFIC_PRIMING}

<instruction>
All variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.
All variable values MUST NOT be NULL whenever possible.

Do not create new variables with the same names as existing variables.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  void* data = Foo();
}
</code>
</instruction>

<instruction>
EXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  if (!some_function()) goto EXIT;
  Foo b = target_function(data, size);
  int c = another_func();
EXIT:
  return 0;
}
</code>

CORRECT:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  Foo b;
  int c;

  if (!some_function()) goto EXIT;
  b = target_function(data, size);
  c = another_func()
EXIT:
  return 0;
}
</code>

If an example provided for the same library includes a unique header file, then it must be included in the solution as well.
</instruction>

<instruction>
This rule applies only when the parameter involves a FILENAME or PATH.
If your function requires a FILENAME or PATH as parameter, you MUST create the file first.
WRONG:
<code>
extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider fdp(data, size);

  size_t fileNameSize = fdp.ConsumeIntegralInRange<size_t>(1, size - 1);
  std::string filename = fdp.ConsumeBytesAsString(fileNameSize);

  // Call function under test
  Foo a = target_function(filename);

  return 0;
}
</code>

CORRECT:
<code>
extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider fdp(data, size);

  // Generate a temporary file and write the fuzzer provider data to it.
  char filename[] = "/tmp/fuzz-XXXXXX";
  int fd = mkstemp(filename);
  if (fd < 0) {
    return 0;
  }
  std::string data_to_write = fdp.ConsumeRemainingBytesAsString();
  write(fd, data_to_write.data(), data_to_write.size());
  close(fd);

  // Call function under test
  Foo a = target_function(filename);

  return 0;
}
</code>

</instruction>
